package classTest;

public class Animal {
	String name; // 객체 변수 = 인스턴스 변수 =멤버 변수 = 속성
	
	/* 클래스에 의해 생성되는 것은 객체, 그리고 그 클래스에 선언된 변수는 객체 변수라고 생각하면 쉽다.
	 * 객체 변수를 만들었으니 이제 객체 변수를 사용해 보자 객체 변수는 값을 대입할 수 있을 것이다. 
	 * 대입하기 전에 객체 변수는 현재 어떤값을 가지고 있는지 출력해 보자
	 * 객체 변수를 출력하려면 객체 변수에 어떻게 접근해야 하는지를 알아야 한다.
	 * 객체 변수는 다음과 같이 도트연산자(.)를 이용하여 접근할 수 있다. 
	 * 
	 * 객체.객체변수 
	 * 즉, Animal cat = new Animal() 처럼 cat이라는 객체를 생성했다면 이 cat객체의 객체 변수 name에는 다음과 같이 접근할 수 있다.
	 * cat.name // 객체 cat  객체변수 name
	 * 
	 */
	public void setName(String name) {
		this.name = name;
	}
	/*Animal 클래스에 추가된 setName메소드는 다음과 같은 형태의 메소드  입력 
	 * String name  출력 void(리턴값 없음)
	 * 즉, 입력으로 name이라는 문자열을 받고 출력은 없는 형태의 메소드이다. 
	 * setName메소드의 내부를 살펴보면 
	 * 객체 변수에 접근하기 위해서 객체.변수와 같이 도트연산자(.)로 접근할 수 있었던것과 마찬가지로 객체가 메소드를 호출하기 위해서는 
	 * 객체.메소드 로 호출할 수 있다.
	 * 즉, 우리가 만든 setName메소드를 호출하려면 다음과 같이 호출해야 한다.
	 * cat.setName("body");
	 * 여기서 setName메소드의 입력으로 문자열을 전달해야 한다. 왜냐하면 setName 메소드는 입력항목으로 문자열을 필요로 하기 떄문이ㅏㄷ.
	 *  setName메소드 내부에 사용된 this는 Animal 클래스에 의해서 생성된 객체를 지칭한다. 
	 *  만약 Animal cat = new Animal() 과 같이 cat이라는 객체를 만들고 cat.setName("body") 와 같이 cat객체에 의해 setName메소드 내부에 선언된 
	 *  this는 바로 cat객체를 지칭하게 된다.
	 *  만약 Animal dog = new Animal() 로 dog객체를 만든 후 dog.setName("happy") 와 같이 호출한다면 setName메소드 내부에 선언된 this는 바로 dog객체를 가르키게 된다.
	 *  따라서 this.name = "body"; 문장은 다음과 같이 해석되어 진다.
	 *  cat.name = "body";
	 *  setName메소드 내부에 사용된 this는  Animal 클래스에 의해서 생성된 객체를 지칭한다. 
	 *  cat.name과 같이 하면 객체 변수에 접근할 수 있음을 우리는 알고 있다. 객체 변수에 값을 대입하는 방법은 아주 쉽다. 
	 *  그냥 변수에 값을 대입하는 것과 마찬가지 방법이다.
	 *  객체.객체변수  = 값 
	 *  따라서 cat.nate = "body"라는 문장은 객체 cat의 객체 변수 name에 "body"라는 값을 대입하게 된다.
	 *  
	 *  Animal 클래스의 객체변수 name이 cat객체와 dog객체간 서로 공유되는 변수라면 아마도 그럴 것이다. 
	 *  클래스에서 가장 중요한 부분은 그 뭐라해도 이 객체 변수의 값이 독립적으로 유지된다는 점이다. 
	 *  사실 이점이 바로 클래스 존재의 이유이기도 하다. 객체지향적(Object Oriented)이라는 말의 의미도 곱씹어  보면 결국 이 객체 변수의 값이 독립적으로 유지되기 떄문에
	 *  가능한 것이다. 
	 *  (참고. 객체 변수의 값은 공유되지 않지만 static을 이용하면 객체 변수를 공유하도록 만들 수도 있다.) 
	 *  
	 * */
	public static void main(String[] args) {
		Animal cat = new Animal();
		cat.setName("body"); // 메소드 호출하면서 전달인자로 String "body" 를 줌 setName함수의 입력항목에는 "bdoy"라는 문자열이 전달될 것이다. 
		System.out.println(cat.name); // 출력한 결과값으로 null이 나왔다. null이라는 것은 값이 할당되어 있지 않은 상태를 말한다. 객체 변수로 name을 선언했지만 
									  // 아무런 값도 대입을 하지 않았기 떄문에 null 이라는 값이 출력된 것이다.
	}
	
	/*
	 * 메소드
	 * 자 이제 객체변수에 접근하는 방법과 현재 값이 할당되어 있지 않은 상태에 대해서 알게되어 있따. 이제 객체 변수에 값을 대입하는 것에 대해서 알아보자
	 * 
	 * 객체 변수에 값을 대입하는 방법에는 여러가지가 있을 수 있지만 여기서는 가장 보편적인 방법인 메소드를 이용하는 방법에 대해서 알아보자
	 * 
	 * 클래스에서는 객체 변수와 더불어 메소드(Method)라는 것이 있다. 메소드는 클래스 내에  구현된 함수를 의미하는데 보통 함수라고 말하지 않고 메소드라고 말한다.
	 * 
	 * 이제 메소드를 이용하여 Aniaml 클래스의 객체 변수인 name에 값을 대입해 보도록 하자
	 * 아래와 같이 setNam 메소드를 추가 해 보자.
	 * 
	 */
}
